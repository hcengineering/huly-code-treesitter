(identifier) @variable
(property_identifier) @variable.member
(shorthand_property_identifier) @variable.member
(shorthand_property_identifier_pattern) @variable.member
(private_property_identifier) @variable.member
(statement_identifier) @label
(this) @variable.builtin
(super) @variable.builtin
(true) @boolean
(false) @boolean
(null) @constant.builtin
(undefined) @constant.builtin
(comment) @comment
(html_comment) @comment
(hash_bang_line) @keyword.directive
(string) @string
(template_string) @string
(escape_sequence) @string.escape
(regex_pattern) @string.regexp
(regex_flags) @character.special
(number) @number
";" @punctuation.delimiter.semicolon
"." @punctuation.delimiter
"," @punctuation.delimiter.comma
":" @punctuation.delimiter
"--" @operator
"-" @operator
"-=" @operator
"&&" @operator
"+" @operator
"++" @operator
"+=" @operator
"&=" @operator
"/=" @operator
"**=" @operator
"<<=" @operator
"<" @operator
"<=" @operator
"<<" @operator
"=" @operator
"==" @operator
"===" @operator
"!=" @operator
"!==" @operator
"=>" @operator
">" @operator
">=" @operator
">>" @operator
"||" @operator
"%" @operator
"%=" @operator
"*" @operator
"**" @operator
">>>" @operator
"&" @operator
"|" @operator
"^" @operator
"??" @operator
"*=" @operator
">>=" @operator
">>>=" @operator
"^=" @operator
"|=" @operator
"&&=" @operator
"||=" @operator
"??=" @operator
"..." @operator
"(" @punctuation.bracket.parentheses
")" @punctuation.bracket.parentheses
"[" @punctuation.bracket
"]" @punctuation.bracket
"{" @punctuation.bracket.braces
"}" @punctuation.bracket.braces
"if" @keyword.conditional
"else" @keyword.conditional
"switch" @keyword.conditional
"case" @keyword.conditional
"import" @keyword.import
"from" @keyword.import
"as" @keyword.import
"export" @keyword.import
"for" @keyword.repeat
"of" @keyword.repeat
"do" @keyword.repeat
"while" @keyword.repeat
"continue" @keyword.repeat
"break" @keyword
"const" @keyword
"debugger" @keyword
"extends" @keyword
"get" @keyword
"let" @keyword
"set" @keyword
"static" @keyword
"target" @keyword
"var" @keyword
"with" @keyword
"class" @keyword.type
"async" @keyword.coroutine
"await" @keyword.coroutine
"return" @keyword.return
"yield" @keyword.return
"function" @keyword.function
"new" @keyword.operator
"delete" @keyword.operator
"in" @keyword.operator
"instanceof" @keyword.operator
"typeof" @keyword.operator
"throw" @keyword.exception
"try" @keyword.exception
"catch" @keyword.exception
"finally" @keyword.exception
"require" @keyword.import
"declare" @keyword
"implements" @keyword
"type" @keyword
"override" @keyword
"module" @keyword
"asserts" @keyword
"infer" @keyword
"is" @keyword
"using" @keyword
"namespace" @keyword.type
"interface" @keyword.type
"enum" @keyword.type
"keyof" @keyword.operator
"satisfies" @keyword.operator
"abstract" @keyword.modifier
"private" @keyword.modifier
"protected" @keyword.modifier
"public" @keyword.modifier
"readonly" @keyword.modifier
(type_identifier) @type
(predefined_type) @type.builtin
(template_literal_type) @string
"default" @keyword
"~" @operator